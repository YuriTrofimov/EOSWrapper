// Copyright:       Copyright (C) 2023 Yuri Trofimov
// Source Code:     https://github.com/YuriTrofimov/EOSWrapper

#pragma once

#include "CoreMinimal.h"
#include "Interfaces/OnlineIdentityInterface.h"
#include "EOSWrapperSubsystem.h"
#include "EOSWrapperTypes.h"
#include "OnlineSubsystemTypes.h"
#include "eos_auth_types.h"
#include "eos_friends_types.h"
#include "eos_connect_types.h"

typedef TSharedPtr<FOnlineUser> FOnlineUserPtr;
typedef TSharedRef<FOnlineUser> FOnlineUserRef;

/**
 * Concrete online user class built from the reusable templates
 */
class FOnlineUserEOS : public TOnlineUserEOS<FOnlineUser, IAttributeAccessInterface>
{
public:
	FOnlineUserEOS(FUniqueNetIdEOSRef InUserId) : TOnlineUserEOS<FOnlineUser, IAttributeAccessInterface>(InUserId) {}

	virtual ~FOnlineUserEOS() = default;
};

typedef TSharedPtr<FOnlineUserEOS> FOnlineUserEOSPtr;
typedef TSharedRef<FOnlineUserEOS> FOnlineUserEOSRef;

/**
 * Info associated with an user account generated by this online service
 */
class FUserOnlineAccountEOS : public TUserOnlineAccountEOS<FUserOnlineAccount>
{
public:
	FUserOnlineAccountEOS(FUniqueNetIdEOSRef InUserId) : TUserOnlineAccountEOS<FUserOnlineAccount>(InUserId) {}

	virtual ~FUserOnlineAccountEOS() = default;
};

typedef TSharedPtr<FUserOnlineAccountEOS> FUserOnlineAccountEOSPtr;
typedef TSharedRef<FUserOnlineAccountEOS> FUserOnlineAccountEOSRef;

struct FNotificationIdCallbackPair
{
	EOS_NotificationId NotificationId;
	FCallbackBase* Callback;

	FNotificationIdCallbackPair() : NotificationId(EOS_INVALID_NOTIFICATIONID), Callback(nullptr) {}

	virtual ~FNotificationIdCallbackPair() { delete Callback; }
};

/**
 *
 */
class EOSWRAPPER_API FEOSWrapperUserManager : public IOnlineIdentity, public TSharedFromThis<FEOSWrapperUserManager, ESPMode::ThreadSafe>
{
public:
	FEOSWrapperUserManager() = delete;
	~FEOSWrapperUserManager();

	FEOSWrapperUserManager(FEOSWrapperSubsystem* WrapperSubsystem) : DefaultLocalUser(0), EOSSubsystem(WrapperSubsystem) {}

	const int EOS_STRING_BUFFER_LENGTH = 256;
	const int EOS_MAX_TOKEN_SIZE = 4096;

	void Initialize();
	void Shutdown();

	// IOnlineIdentity Interface
	virtual bool Login(int32 LocalUserNum, const FOnlineAccountCredentials& AccountCredentials) override;
	virtual bool Logout(int32 LocalUserNum) override;
	virtual bool AutoLogin(int32 LocalUserNum) override;
	virtual TSharedPtr<FUserOnlineAccount> GetUserAccount(const FUniqueNetId& UserId) const override;
	virtual TArray<TSharedPtr<FUserOnlineAccount>> GetAllUserAccounts() const override;
	virtual FUniqueNetIdPtr GetUniquePlayerId(int32 LocalUserNum) const override;
	virtual FUniqueNetIdPtr CreateUniquePlayerId(uint8* Bytes, int32 Size) override;
	virtual FUniqueNetIdPtr CreateUniquePlayerId(const FString& Str) override;
	virtual ELoginStatus::Type GetLoginStatus(int32 LocalUserNum) const override;
	virtual ELoginStatus::Type GetLoginStatus(const FUniqueNetId& UserId) const override;
	virtual FString GetPlayerNickname(int32 LocalUserNum) const override;
	virtual FString GetPlayerNickname(const FUniqueNetId& UserId) const override;
	virtual FString GetAuthToken(int32 LocalUserNum) const override;
	virtual void GetUserPrivilege(const FUniqueNetId& UserId, EUserPrivileges::Type Privilege, const FOnGetUserPrivilegeCompleteDelegate& Delegate) override;
	virtual FString GetAuthType() const override;
	virtual void RevokeAuthToken(const FUniqueNetId& LocalUserId, const FOnRevokeAuthTokenCompleteDelegate& Delegate) override;
	virtual FPlatformUserId GetPlatformUserIdFromUniqueNetId(const FUniqueNetId& UniqueNetId) const override;
	virtual void GetLinkedAccountAuthToken(int32 LocalUserNum, const FOnGetLinkedAccountAuthTokenCompleteDelegate& Delegate) const override;
	// ~IOnlineIdentity Interface

	ELoginStatus::Type GetLoginStatus(const FUniqueNetIdEOS& UserId) const;
	FUniqueNetIdEOSPtr GetLocalUniqueNetIdEOS(int32 LocalUserNum) const;
	bool ConnectLoginEAS(int32 LocalUserNum, EOS_EpicAccountId AccountId);
	void FullLoginCallback(int32 LocalUserNum, EOS_EpicAccountId AccountId, EOS_ProductUserId UserId);
	void CreateConnectedLogin(int32 LocalUserNum, EOS_EpicAccountId AccountId, EOS_ContinuanceToken Token);
	int32 GetLocalUserNumFromUniqueNetId(const FUniqueNetId& NetId) const;
	void RefreshConnectLogin(int32 LocalUserNum);
	void UpdateUserInfo(IAttributeAccessInterfaceRef AttriubteAccessRef, EOS_EpicAccountId LocalId, EOS_EpicAccountId AccountId);
	void LoginStatusChanged(const EOS_Auth_LoginStatusChangedCallbackInfo* Data);

private:
	void RemoveLocalUser(int32 LocalUserNum);
	void AddLocalUser(int32 LocalUserNum, EOS_EpicAccountId EpicAccountId, EOS_ProductUserId UserId);

	/** Default local user when no local user is specified */
	int32 DefaultLocalUser;

	/** Reference to the main EOS subsystem */
	FEOSWrapperSubsystem* EOSSubsystem;

	/** Ids mapped to locally registered users */
	TMap<int32, EOS_EpicAccountId> UserNumToAccountIdMap;
	TMap<EOS_EpicAccountId, int32> AccountIdToUserNumMap;
	TMap<int32, FUniqueNetIdEOSPtr> UserNumToNetIdMap;
	TMap<int32, EOS_ProductUserId> UserNumToProductUserIdMap;
	TMap<EOS_ProductUserId, int32> ProductUserIdToUserNumMap;
	TMap<FString, FUserOnlineAccountEOSRef> StringToUserAccountMap;

	/** General account mappings */
	TMap<EOS_EpicAccountId, FString> AccountIdToStringMap;
	TMap<EOS_ProductUserId, FString> ProductUserIdToStringMap;

	/** Last Login Credentials used for a login attempt */
	TMap<int32, TSharedRef<FOnlineAccountCredentials>> LocalUserNumToLastLoginCredentials;

	/** Ids mapped to remote users */
	TMap<FString, FOnlineUserPtr> NetIdStringToOnlineUserMap;
	TMap<EOS_EpicAccountId, FOnlineUserPtr> EpicAccountIdToOnlineUserMap;
	TMap<FString, IAttributeAccessInterfaceRef> NetIdStringToAttributeAccessMap;
	TMap<EOS_EpicAccountId, IAttributeAccessInterfaceRef> EpicAccountIdToAttributeAccessMap;

	/** Notification state for SDK events */
	EOS_NotificationId LoginNotificationId;
	FCallbackBase* LoginNotificationCallback;
	EOS_NotificationId FriendsNotificationId;
	FCallbackBase* FriendsNotificationCallback;
	EOS_NotificationId PresenceNotificationId;
	FCallbackBase* PresenceNotificationCallback;
	TMap<int32, FNotificationIdCallbackPair*> LocalUserNumToConnectLoginNotifcationMap;
};
